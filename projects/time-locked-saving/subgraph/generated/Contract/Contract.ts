// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class VaultCreated extends ethereum.Event {
  get params(): VaultCreated__Params {
    return new VaultCreated__Params(this);
  }
}

export class VaultCreated__Params {
  _event: VaultCreated;

  constructor(event: VaultCreated) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Contract__vaultsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: string;
  value5: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: string,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getDepositAmount(): BigInt {
    return this.value1;
  }

  getTargetAmount(): BigInt {
    return this.value2;
  }

  getLockEndTime(): BigInt {
    return this.value3;
  }

  getPurpose(): string {
    return this.value4;
  }

  getWithdrawn(): boolean {
    return this.value5;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  minDeposit(_targetAmount: BigInt): BigInt {
    let result = super.call("minDeposit", "minDeposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_targetAmount)
    ]);

    return result[0].toBigInt();
  }

  try_minDeposit(_targetAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minDeposit", "minDeposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_targetAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minDuration(): BigInt {
    let result = super.call("minDuration", "minDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minDuration", "minDuration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaults(param0: BigInt): Contract__vaultsResult {
    let result = super.call(
      "vaults",
      "vaults(uint256):(address,uint256,uint256,uint256,string,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__vaultsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toString(),
      result[5].toBoolean()
    );
  }

  try_vaults(param0: BigInt): ethereum.CallResult<Contract__vaultsResult> {
    let result = super.tryCall(
      "vaults",
      "vaults(uint256):(address,uint256,uint256,uint256,string,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__vaultsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toString(),
        value[5].toBoolean()
      )
    );
  }
}

export class CreateVaultCall extends ethereum.Call {
  get inputs(): CreateVaultCall__Inputs {
    return new CreateVaultCall__Inputs(this);
  }

  get outputs(): CreateVaultCall__Outputs {
    return new CreateVaultCall__Outputs(this);
  }
}

export class CreateVaultCall__Inputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }

  get _targetAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _purpose(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateVaultCall__Outputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }
}

export class DepositVaultCall extends ethereum.Call {
  get inputs(): DepositVaultCall__Inputs {
    return new DepositVaultCall__Inputs(this);
  }

  get outputs(): DepositVaultCall__Outputs {
    return new DepositVaultCall__Outputs(this);
  }
}

export class DepositVaultCall__Inputs {
  _call: DepositVaultCall;

  constructor(call: DepositVaultCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositVaultCall__Outputs {
  _call: DepositVaultCall;

  constructor(call: DepositVaultCall) {
    this._call = call;
  }
}

export class WithdrawVaultCall extends ethereum.Call {
  get inputs(): WithdrawVaultCall__Inputs {
    return new WithdrawVaultCall__Inputs(this);
  }

  get outputs(): WithdrawVaultCall__Outputs {
    return new WithdrawVaultCall__Outputs(this);
  }
}

export class WithdrawVaultCall__Inputs {
  _call: WithdrawVaultCall;

  constructor(call: WithdrawVaultCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawVaultCall__Outputs {
  _call: WithdrawVaultCall;

  constructor(call: WithdrawVaultCall) {
    this._call = call;
  }
}
